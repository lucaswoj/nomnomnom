// Generated by CoffeeScript 1.6.2
(function() {
  var nom, require, _ref, _ref1, _ref2, _ref3, _ref4,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  require = function(src) {
    return document.body.appendChild(document.createElement('script')).src = src;
  };

  require('http://ajax.googleapis.com/ajax/libs/jquery/2.0.3/jquery.min.js');

  nom = {};

  nom.getLowestFraction = function(x0) {
    var a, eps, h, h1, h2, integer, k, k1, k2, string, x;

    eps = 0.1;
    integer = Math.floor(x0);
    x0 = x0 - integer;
    x = x0;
    a = Math.floor(x) || 0;
    h1 = 1;
    k1 = 0;
    h = a;
    k = 1;
    while (x - a > eps * k * k) {
      x = 1 / (x - a);
      a = Math.floor(x);
      h2 = h1;
      h1 = h;
      k2 = k1;
      k1 = k;
      h = h2 + a * h1;
      k = k2 + a * k1;
    }
    if (k === 1) {
      integer += h;
    }
    string = '';
    if (integer !== 0) {
      string += integer + ' ';
    }
    if (k > 1) {
      string += h + "/" + k;
    }
    return string;
  };

  nom.Recipe = (function() {
    Recipe.createFromNode = function(node) {
      var $node;

      $node = $(node);
      return new nom.Recipe({
        name: $node.find("[itemprop=name]").text(),
        ingredients: $.map($node.find("[itemprop=ingredients]"), function(el) {
          return nom.Ingredient.createFromNode(el);
        }),
        steps: $.grep($.map($("[itemProp=recipeInstructions]").text().split('\n'), function(step) {
          return new nom.Step($.trim(step));
        }), function(step) {
          return step.step !== "";
        }),
        servings: parseInt($('[itemProp=recipeYield]').text())
      });
    };

    function Recipe(options) {
      this.name = options.name, this.ingredients = options.ingredients, this.steps = options.steps, this.servings = options.servings;
    }

    Recipe.prototype.setServings = function(servings) {
      var ingredient, ratio, _i, _len, _ref;

      ratio = servings / this.servings;
      _ref = this.ingredients;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        ingredient = _ref[_i];
        ingredient.amount *= ratio;
      }
      return this.servings = servings;
    };

    return Recipe;

  })();

  nom.Step = (function() {
    function Step(step) {
      this.step = step;
      this.done = false;
    }

    return Step;

  })();

  nom.Ingredient = (function() {
    Ingredient.UnitSystem = {
      Imperial: 'imperial',
      Metric: 'metric'
    };

    Ingredient.UnitType = {
      Volume: 'volume',
      Mass: 'mass'
    };

    Ingredient.units = {
      tablespoon: {
        aliases: ['tbsp', 'tbs'],
        type: Ingredient.UnitType.Volume,
        system: Ingredient.UnitSystem.Imperial,
        conversion: 67.628
      },
      teaspoon: {
        aliases: ['tsp'],
        type: Ingredient.UnitType.Volume,
        system: Ingredient.UnitSystem.Imperial,
        conversion: 202.884
      },
      cup: {
        aliases: ['cup'],
        type: Ingredient.UnitType.Volume,
        system: Ingredient.UnitSystem.Imperial,
        conversion: 4.22675
      },
      quart: {
        aliases: ['qt'],
        type: Ingredient.UnitType.Volume,
        system: Ingredient.UnitSystem.Imperial,
        conversion: 1.05669
      },
      litre: {
        aliases: ['liter', 'L'],
        type: Ingredient.UnitType.Volume,
        system: Ingredient.UnitSystem.Metric,
        conversion: 1
      },
      pound: {
        aliases: ['lb'],
        type: Ingredient.UnitType.Weight,
        system: Ingredient.UnitSystem.Imperial,
        conversion: 2.20462
      },
      ounce: {
        aliases: ['oz'],
        type: Ingredient.UnitType.Weight,
        system: Ingredient.UnitSystem.Imperial,
        conversion: 35.274
      }
    };

    Ingredient.createFromNode = function(node) {
      return this.createFromString($(node).text());
    };

    Ingredient.createFromString = function(string) {
      var amount, match, name, unit, unitName, unitNames, _i, _len, _ref;

      match = string.match(/([0-9]+ )?(([0-9]+)\/([0-9]+) )?\s*(.+)/);
      amount = (parseFloat(match[1], 10) || 0) + (parseInt(match[3], 10) || 0) / (parseInt(match[4], 10) || 1);
      unit;
      _ref = this.units;
      for (unitName in _ref) {
        unit = _ref[unitName];
        unit.name = unitName;
        unitNames = [unitName].concat(unit.aliases);
        unitNames = $.map(unitNames, function(name) {
          return name + 's';
        }).concat(unitNames);
        for (_i = 0, _len = unitNames.length; _i < _len; _i++) {
          unitName = unitNames[_i];
          if (match[5].indexOf(unitName) === 0) {
            name = $.trim(match[5].slice(unitName.length));
            return new nom.Ingredient(unit, amount, name);
          }
        }
      }
      return new nom.Ingredient(null, amount, match[5]);
    };

    function Ingredient(unit, amount, name) {
      this.unit = unit;
      this.amount = amount;
      this.name = name;
      this.done = false;
    }

    Ingredient.prototype.toFormattedString = function() {
      var string;

      string = '<dt>' + nom.getLowestFraction(this.amount);
      if (this.unit) {
        string += " " + this.unit.name + 's</strong>';
      }
      string += '</dt><dd>';
      return string += " " + this.name + "</dd>";
    };

    return Ingredient;

  })();

  nom.View = (function() {
    function View(attributes) {
      var node;

      node = document.createElement(this.nodeTag || 'div');
      this.$node = $(node);
      $.extend(this, attributes);
      this.render();
    }

    return View;

  })();

  nom.IngredientsView = (function(_super) {
    __extends(IngredientsView, _super);

    function IngredientsView() {
      _ref = IngredientsView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    IngredientsView.prototype.nodeTag = 'dl';

    IngredientsView.prototype.render = function() {
      var _this = this;

      this.$node.addClass("dl-horizontal");
      return $.each(this.ingredients, function(n, ingredient) {
        var $ingredientNode;

        $ingredientNode = $(ingredient.toFormattedString());
        _this.$node.append($ingredientNode);
        $ingredientNode.css({
          cursor: 'pointer'
        });
        $ingredientNode.one("click", function() {
          ingredient.done = !ingredient.done;
          _this.$node.empty();
          return _this.render();
        });
        if (ingredient.done) {
          return $ingredientNode.wrapInner('<strike>');
        }
      });
    };

    return IngredientsView;

  })(nom.View);

  nom.ServingsView = (function(_super) {
    __extends(ServingsView, _super);

    function ServingsView() {
      _ref1 = ServingsView.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    ServingsView.prototype.render = function() {
      var _this = this;

      this.$node.text("" + this.recipe.servings + " Servings");
      this.$node.css({
        textAlign: 'center',
        fontWeight: 'bold',
        fontSize: 16,
        cursor: 'pointer'
      });
      this.$node.one('mousedown', function(event) {
        if (event.which === 1) {
          _this.recipe.setServings(_this.recipe.servings + 1);
        } else {
          _this.recipe.setServings(_this.recipe.servings - 1);
        }
        event.preventDefault();
        return nom.modalView.render();
      });
      return this.$node.one('contextmenu', function(event) {
        return event.preventDefault();
      });
    };

    return ServingsView;

  })(nom.View);

  nom.StepsView = (function(_super) {
    __extends(StepsView, _super);

    function StepsView() {
      _ref2 = StepsView.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    StepsView.prototype.render = function() {
      var step, stepView, _i, _len, _ref3, _results;

      _ref3 = this.steps;
      _results = [];
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        step = _ref3[_i];
        stepView = new nom.StepView({
          step: step
        });
        _results.push(this.$node.append(stepView.$node));
      }
      return _results;
    };

    return StepsView;

  })(nom.View);

  nom.StepView = (function(_super) {
    __extends(StepView, _super);

    function StepView() {
      _ref3 = StepView.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    StepView.prototype.render = function() {
      var _this = this;

      this.$node.text(this.step.step);
      this.$node.css({
        margin: '10px 0',
        cursor: 'pointer'
      });
      this.$node.one("click", function() {
        _this.step.done = !_this.step.done;
        _this.$node.empty();
        return _this.render();
      });
      if (this.step.done) {
        return this.$node.wrapInner('<strike>');
      }
    };

    return StepView;

  })(nom.View);

  nom.RecipeView = (function(_super) {
    __extends(RecipeView, _super);

    function RecipeView() {
      _ref4 = RecipeView.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    RecipeView.prototype.render = function() {
      this.ingredientsView = new nom.IngredientsView({
        ingredients: this.recipe.ingredients
      });
      this.servingsView = new nom.ServingsView({
        recipe: this.recipe
      });
      this.stepsView = new nom.StepsView({
        steps: this.recipe.steps
      });
      this.$node = $('<div>', {
        "class": 'container',
        css: {
          margin: '25px 45px'
        },
        html: "<h2 style='text-align: center'><strong>" + this.recipe.name + "</strong></h2>"
      });
      this.$node.append(this.servingsView.$node);
      this.$node.append('<hr>');
      this.$node.append(this.ingredientsView.$node);
      this.$node.append('<hr>');
      return this.$node.append(this.stepsView.$node);
    };

    return RecipeView;

  })(nom.View);

  nom.ModalView = (function() {
    function ModalView() {
      this.$node = $('<div>', {
        css: {
          width: 0,
          height: 0,
          position: 'fixed',
          top: 20,
          left: '50%'
        },
        appendTo: $('body')
      });
      this.$iframe = $('<iframe>', {
        css: {
          width: 850,
          height: 600,
          right: -760 / 2,
          top: 0,
          backgroundColor: '#fff',
          position: 'absolute',
          boxShadow: '0 0 50px #000'
        },
        appendTo: this.$node
      });
      this.$iframe.contents().find('head').append($('<link>', {
        rel: 'stylesheet',
        type: 'text/css',
        href: 'http://netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css'
      }));
      this.recipe = nom.Recipe.createFromNode($('[itemtype="http://schema.org/Recipe"]'));
      this.render();
    }

    ModalView.prototype.render = function() {
      this.$iframe.contents().find('body').empty();
      this.recipeView = new nom.RecipeView({
        recipe: this.recipe
      });
      return this.$iframe.contents().find('body').append(this.recipeView.$node);
    };

    return ModalView;

  })();

  nom.modalView = new nom.ModalView();

}).call(this);
